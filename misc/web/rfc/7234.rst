.. contents::



1
==========
+ validation，去服务器检查资源是否可以重用
+ fresh，不用 validation 就可以直接重用
+ delta-seconds，非负整数
+ recipient 要把 delta-seconds 转换成二进制，最少要支持 31-bit
+ 如果 delta-seconds 超出了 recipient 的精度，
  应该把 delta-seconds 设为 2147483648 (2^31) 或者能表示的更大精度

3
==========
+ 满足下面全部条件的时候，才能对 response 进行缓存

  - request method 和 response status 都表明可以缓存
  - request 和 response 中都没有 no-store
  - cache is shared 且 response 中没有 private
  - 关于 authorization
  - response 满足如下任一条件

    * header 中有 Expires
    * header 中有 max-age
    * cache is shared 且 header 中有 s-maxage
    * header 中有表示允许缓存的 cache control extension
    * 标准规定该 status 可以进行缓存
    * header 中有 public

+ 比起上面的条件，cache-control extension 有更高的优先级
+ 对于不完整的 response ，比如 未传输完的 200 和 传输完的 206，
  只有在支持 Range 和 Content-Range 的时候，才允许进行缓存


4
==========
+ 满足下面全部条件的时候，才能使用缓存

  - request URI 是有效的且和缓存匹配
  - request method 允许使用缓存（？）
  - response 满足 Vary 的条件
  - request 中没有 no-cache，除非经过 validate
  - response 中没有 no-cache，除非经过 validate
  - response 满足如下任一条件

    * fresh
    * 允许 stale
    * 重新 validate

+ 比起上面的条件，cache-control extension 有更高的优先级
+ 在使用未经 validate 的缓存时，必须生产一个新 current_age，
  替代原有的 current_age
+ unsafe request 会导致缓存失效
+ 有多个可用缓存时，选择 Date 最新的那个。


4.1
----------
+ 如果缓存的 response 中带有 Vary，必须对 Vary 涉及的 header 进行比较。
  只有当涉及的 header 在前后两个 request 中都相同的时候，
  才能使用该缓存
+ 如果出现 "Vary: \*"，直接认为前后两个 request 是不匹配的


4.2
----------
+ fresh response 是 current_age < freshness_lifetime 的 response
+ stale response 是 current_age > freshness_lifetime 的 response
+ freshness_lifetime 是 生成时间 到 过期时间 的时长
+ current_age 是指 服务器生成或验证资源的时间 到 当前时间 的时长
+ 如果缓存中的资源是 fresh 的，可以不经服务器验证直接返回给客户端
+ 判断是否 fresh 是靠服务器提供的 Expires 或 max-age 确定过期时间
+ 如果服务器没有提供与过期时间相关的 header，允许客户端自己判断
+ request 中可以使用 max-age 或 min-fresh 影响 fresh 的判断


4.2.1
``````````
+ freshness_lifetime 使用如下方式计算

  - cache is shared 且设置了 s-maxage，使用 s-maxage
  - 设置了 max-age，使用 max-age
  - 有 Expires，使用 (Expires - Date)
  - 都没有的情况下，允许客户端自己判断

+ freshness_lifetime 与客户端时间无关，使用服务器时间计算出来的
+ 如果上述 header 出现了重复，应该认为重复的 header 是无效，
  将内容标记成 stale 的

4.2.2
``````````
+ 客户端自己判断过期时间时，可以使用 Last-Modified 之类的 header 进行估算
+ 具体怎么算，规范没定义
+ 如果 freshness_lifetime 是客户端自己算出来的，
  且 current_age 超过了 24 个小时，
  缓存应该给 response 添加一个 Warning

4.2.3
``````````
+ Age 是缓存估计出来的，表示从服务器生成该资源到当前经过了多少秒

4.2.4
``````````
+ stale reponse 是 有明确过期时间 或者 允许浏览器自己估算过期时间，
  并且确实过期的了的 response
+ 缓存在 response 中有 no-store/no-cache/must-revalidate/s-maxage/proxy-revalidate
  的时候，不允许返回 stale response
+ 缓存只有在 离线 或者 指定了 max-stale 的情况下才能使用 stale response
+ 缓存在使用 stale response 的时候，应该在 response 中添加 Warning
+ 在转发没有 Age 的 response 的时候，缓存不该添加 Warning
  （即使知道是个 stale response）

4.3
----------
+ validate 是指，在客户端无法决定使用哪个缓存的时候，使用 conditional request，
  让服务器决定是使用某个缓存或者创建一个新的 response

4.3.1
``````````
+ If-Modified-Since 用于 validate，If-Unmodified-Since 用于选择
+ If-None-Match 用于 validate，If-Match 用于选择

4.3.2
``````````
+ 如果缓存中有 response 能满足 request，缓存应该检查 conditional header，
  选择符合要求的 response
+ If-Match 和 If-Unmodified-Since 是给原始服务器用的，
  不允许中间服务器对这些条件进行判断
+ 服务器无法判断判断某个条件是否满足的时候，继续向上层服务器发送请求



4.3.3
``````````
+ 在处理 validation response 的时候

  - 304，本地缓存可以继续使用
  - response，缓存不可用，使用返回的 response
  - 5xx，可以直接把 5xx 返回给用户，
    也可以在 request 允许的情况下，选择使用之前的缓存

4.3.4
``````````
+ 缓存收到 304 的 response 的时候，要更新缓存中对应的 response
+ 缓存使用如下步骤寻找对应的 response

  - 如果 304 有强验证的时候，所以满足的缓存都会被选中
  - 如果 304 是弱验证，从满足的缓存中选取最新的那个
  - 如果 304 不带验证，只有当 缓存中只有一个 response 且
    该 response 也没带验证，才选中该缓存
  - 没有满足的说明没有对应的 response

+ 当一个缓存的 response 被更新的时候，要

  - 删除 1xx 的 Warning
  - 保留 2xx 的 Warning
  - 更新 header

4.4
----------
+ safe method 以外的方法在得到 2xx/3xx 后会导致缓存失效
+ 包括出现在 Location 和 Content-Location 中的地址


5
==========

5.2
----------
+ Cache-Control = 1#cache-directive
+ cache-directive = token [ "=" (token / quoted-string) ]

5.2.1
``````````
+ request 中的指令

  - "max-age=5"，表示 Age 超过多少后，认为缓存不可用，优先级高于 max-stale
  - "max-stale=10"，表示允许超过 freshness_lifetime 多少秒，
    没有设置具体时间表示无穷大，超过多久都无所谓
  - "min-fresh=5"，freshness_lifetime 的最小值
  - "no-cache"，每次都必须向服务器验证缓存是否可用
  - "no-store"，禁止对本次连接的 request 和 response 进行缓存
  - "no-transform"，禁止中间服务器对 payload 进行操作，比如进行压缩之类的行为
  - "only-if-cached"，只允许返回缓存的 response，没有就返回 504

5.2.2
``````````
+ response 中的指令

  - "must-revalidate"，使用过期的缓存前，必须到服务器验证是否可用，
    连不上服务器应该返回 504
  - "no-cache=#field-name"，
    不带 header 表示使用缓存前必须向服务器验证是否可用。
    带 header 表示不经服务器验证直接使用缓存的时候，要把指定的 header 去掉。
    另外 field-name 应该使用 quoted-string 的形式。
  - "no-store"，禁止对本次连接的 request 和 response 进行缓存
  - "no-transform"，禁止中间服务器对 payload 进行操作，比如进行压缩之类的行为
  - "public"，表明该 response 是可缓存的，主要用于原本通常不缓存的情况
  - "private=#field-name"，没有 header 表示这个 response 是为特定用户生成的，
    不能放入 shared cache。但是可以用于某些通常不缓存的场合。
    如果指定了 header，表示 shared cache 不能缓存指定的 header。
  - "proxy-revalidate"，除了 private caches，
    其他缓存如果过期了，使用前必须到服务器验证是否可用
  - "max-age=5"，表示 Age 超过多少后，认为缓存不可用
  - "s-maxage=10"，针对 shared caches 的 max-age，
    优先级高于 max-age 和 Expires，同时具有 "proxy-revalidate" 的效果


5.2.3
``````````
+ 允许对 Cache-Control 自由扩展，只要忽略不认识的就行

5.3
----------
+ Expires = HTTP-data
+ Expires 是缓存的过期时间
+ max-age 的优先级高于 Expires
+ 历史遗留问题，这个时间不要超过一年，32-bit 会溢出

5.4
----------
+ Pragma 是为了兼容 HTTP/1.0，同 no-cache
+ 如果出现了 Cache-Control，即使 Cache-Control 中没有 no-cache，
  应该直接忽略掉 Pragma。

5.5
----------
+ Warning 是 status code 的补充


6
==========
+ 后退功能，可能使用过期的缓存，不受限制。
